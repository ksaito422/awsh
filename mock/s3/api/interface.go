// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3Api is a mock of S3Api interface.
type MockS3Api struct {
	ctrl     *gomock.Controller
	recorder *MockS3ApiMockRecorder
}

// MockS3ApiMockRecorder is the mock recorder for MockS3Api.
type MockS3ApiMockRecorder struct {
	mock *MockS3Api
}

// NewMockS3Api creates a new mock instance.
func NewMockS3Api(ctrl *gomock.Controller) *MockS3Api {
	mock := &MockS3Api{ctrl: ctrl}
	mock.recorder = &MockS3ApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Api) EXPECT() *MockS3ApiMockRecorder {
	return m.recorder
}

// DownloadObject mocks base method.
func (m *MockS3Api) DownloadObject(arg0 aws.Config, arg1 string, arg2 *s3.ListObjectsV2Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadObject indicates an expected call of DownloadObject.
func (mr *MockS3ApiMockRecorder) DownloadObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadObject", reflect.TypeOf((*MockS3Api)(nil).DownloadObject), arg0, arg1, arg2)
}

// ListBuckets mocks base method.
func (m *MockS3Api) ListBuckets(arg0 aws.Config) (*s3.ListBucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", arg0)
	ret0, _ := ret[0].(*s3.ListBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockS3ApiMockRecorder) ListBuckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockS3Api)(nil).ListBuckets), arg0)
}

// ListObjects mocks base method.
func (m *MockS3Api) ListObjects(arg0 aws.Config, arg1 string) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0, arg1)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockS3ApiMockRecorder) ListObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockS3Api)(nil).ListObjects), arg0, arg1)
}

// SelectBucketName mocks base method.
func (m *MockS3Api) SelectBucketName(arg0 *s3.ListBucketsOutput) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBucketName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SelectBucketName indicates an expected call of SelectBucketName.
func (mr *MockS3ApiMockRecorder) SelectBucketName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBucketName", reflect.TypeOf((*MockS3Api)(nil).SelectBucketName), arg0)
}
